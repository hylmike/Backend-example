scalar DateTime

type ReaderProfile {
  _id: ID!
  firstName: String!
  lastName: String!
  gender: String!
  birthday: DateTime!
  phoneNumber: String!
  address: Address!
  readTimes: Int!
  readDuration: Int!
  score: Int!
  securityQuestion: String!
  securityAnswer: String!
}

type Reader {
  _id: ID!
  username: String!
  password: String!
  email: String!
  isActive: Boolean!
  registerDate: DateTime!
  currentRefreshToken: String
  favorBooks: [Book]
  readerProfile: ReaderProfile!
  readHistory: [ReaderReadHistory]
}

type ReaderReadHistory {
  _id: ID!
  bookID: ID!
  currentPage: Int!
  startTime: DateTime!
  lastReadTime: DateTime!
  readTimes: Int!
  readDuration: Int!
  book: Book
}

type Address {
  homeAddress: String!
  province: String!
  postcode: String!
}

type AccessToken {
  tokenInfo: String!
}

type Token {
  _id: ID!
  readerName: String!
  email: String!
  token: String!
  createTime: DateTime!
}

type Query {
  reader(id: ID!): Reader
  allReaders: [Reader]!
  topReaders(num: Int!): [Reader]!
  favorBookList(id: ID!): [Book]!
}

type Mutation {
  registerReader(regReaderData: RegReaderInput!): Reader
  updateReader(updateReaderData: UpdateReaderInput!): Reader
  changeReaderPwd(changeReaderPwdData: ChangePwdInput!): Reader
  deaReader(id: ID!): Reader
  actReader(id: ID!): Reader
  delReader(id: ID!): Reader
  addFavorBook(favorBookData: FavorBookInput!): Reader
  delFavorBook(favorBookData: FavorBookInput!): Reader
}
